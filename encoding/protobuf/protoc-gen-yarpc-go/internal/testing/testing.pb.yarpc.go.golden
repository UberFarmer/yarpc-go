// Code generated by protoc-gen-yarpc-go
// source: encoding/protobuf/protoc-gen-yarpc-go/internal/testing/testing.proto
// DO NOT EDIT!

package testing

import (
	"context"
	"io/ioutil"
	"reflect"

	"github.com/gogo/protobuf/proto"
	"go.uber.org/fx"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/protobuf"
	"go.uber.org/yarpc/encoding/protobuf/reflection"
	"go.uber.org/yarpc/yarpcproto"
)

var _ = ioutil.NopCloser

// KeyValueYARPCClient is the YARPC client-side interface for the KeyValue service.
type KeyValueYARPCClient interface {
	GetValue(context.Context, *GetValueRequest, ...yarpc.CallOption) (*GetValueResponse, error)
	SetValue(context.Context, *SetValueRequest, ...yarpc.CallOption) (*SetValueResponse, error)
}

// NewKeyValueYARPCClient builds a new YARPC client for the KeyValue service.
func NewKeyValueYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) KeyValueYARPCClient {
	return &_KeyValueYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.KeyValue",
			ClientConfig: clientConfig,
			Options:      options,
		},
	)}
}

// KeyValueYARPCServer is the YARPC server-side interface for the KeyValue service.
type KeyValueYARPCServer interface {
	GetValue(context.Context, *GetValueRequest) (*GetValueResponse, error)
	SetValue(context.Context, *SetValueRequest) (*SetValueResponse, error)
}

// BuildKeyValueYARPCProcedures prepares an implementation of the KeyValue service for YARPC registration.
func BuildKeyValueYARPCProcedures(server KeyValueYARPCServer) []transport.Procedure {
	handler := &_KeyValueYARPCHandler{server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.KeyValue",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "GetValue",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:     handler.GetValue,
							NewRequest: newKeyValueServiceGetValueYARPCRequest,
						},
					),
				},
				{
					MethodName: "SetValue",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:     handler.SetValue,
							NewRequest: newKeyValueServiceSetValueYARPCRequest,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{},
		},
	)
}

// FxKeyValueYARPCClientParams defines the input
// for NewFxKeyValueYARPCClient. It provides the
// paramaters to get a KeyValueYARPCClient in an
// Fx application.
type FxKeyValueYARPCClientParams struct {
	fx.In

	Provider yarpc.ClientConfig
}

// FxKeyValueYARPCClientResult defines the output
// of NewFxKeyValueYARPCClient. It provides a
// KeyValueYARPCClient to an Fx application.
type FxKeyValueYARPCClientResult struct {
	fx.Out

	Client KeyValueYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxKeyValueYARPCClient provides a KeyValueYARPCClient
// to an Fx application using the given name for routing.
//
//  fx.Provide(
//    testing.NewFxKeyValueYARPCClient("service-name"),
//    ...
//  )
func NewFxKeyValueYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxKeyValueYARPCClientParams) FxKeyValueYARPCClientResult {
		return FxKeyValueYARPCClientResult{
			Client: NewKeyValueYARPCClient(params.Provider.ClientConfig(name), options...),
		}
	}
}

// FxKeyValueYARPCProceduresParams defines the input
// for NewFxKeyValueYARPCProcedures. It provides the
// paramaters to get KeyValueYARPCServer procedures in an
// Fx application.
type FxKeyValueYARPCProceduresParams struct {
	fx.In

	Server KeyValueYARPCServer
}

// FxKeyValueYARPCProceduresResult defines the output
// of NewFxKeyValueYARPCProcedures. It provides
// KeyValueYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxKeyValueYARPCProceduresResult struct {
	fx.Out

	Procedures     []transport.Procedure `group:"yarpcfx"`
	ReflectionMeta reflection.ServerMeta `group:"yarpcfx"`
}

// NewFxKeyValueYARPCProcedures provides KeyValueYARPCServer procedures to an Fx application.
// It expects a KeyValueYARPCServer to be present in the container.
//
//  fx.Provide(
//    testing.NewFxKeyValueYARPCProcedures(),
//    ...
//  )
func NewFxKeyValueYARPCProcedures() interface{} {
	return func(params FxKeyValueYARPCProceduresParams) FxKeyValueYARPCProceduresResult {
		return FxKeyValueYARPCProceduresResult{
			Procedures: BuildKeyValueYARPCProcedures(params.Server),
			ReflectionMeta: reflection.ServerMeta{
				ServiceName:     "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.KeyValue",
				FileDescriptors: yarpcFileDescriptorClosure301ba429865f230b,
			},
		}
	}
}

type _KeyValueYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_KeyValueYARPCCaller) GetValue(ctx context.Context, request *GetValueRequest, options ...yarpc.CallOption) (*GetValueResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetValue", request, newKeyValueServiceGetValueYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetValueResponse)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValueServiceGetValueYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_KeyValueYARPCCaller) SetValue(ctx context.Context, request *SetValueRequest, options ...yarpc.CallOption) (*SetValueResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "SetValue", request, newKeyValueServiceSetValueYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*SetValueResponse)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValueServiceSetValueYARPCResponse, responseMessage)
	}
	return response, err
}

type _KeyValueYARPCHandler struct {
	server KeyValueYARPCServer
}

func (h *_KeyValueYARPCHandler) GetValue(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetValueRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetValueRequest)
		if !ok {
			return nil, protobuf.CastError(emptyKeyValueServiceGetValueYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetValue(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_KeyValueYARPCHandler) SetValue(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *SetValueRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*SetValueRequest)
		if !ok {
			return nil, protobuf.CastError(emptyKeyValueServiceSetValueYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.SetValue(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func newKeyValueServiceGetValueYARPCRequest() proto.Message {
	return &GetValueRequest{}
}

func newKeyValueServiceGetValueYARPCResponse() proto.Message {
	return &GetValueResponse{}
}

func newKeyValueServiceSetValueYARPCRequest() proto.Message {
	return &SetValueRequest{}
}

func newKeyValueServiceSetValueYARPCResponse() proto.Message {
	return &SetValueResponse{}
}

var (
	emptyKeyValueServiceGetValueYARPCRequest  = &GetValueRequest{}
	emptyKeyValueServiceGetValueYARPCResponse = &GetValueResponse{}
	emptyKeyValueServiceSetValueYARPCRequest  = &SetValueRequest{}
	emptyKeyValueServiceSetValueYARPCResponse = &SetValueResponse{}
)

// SinkYARPCClient is the YARPC client-side interface for the Sink service.
type SinkYARPCClient interface {
	Fire(context.Context, *FireRequest, ...yarpc.CallOption) (yarpc.Ack, error)
}

// NewSinkYARPCClient builds a new YARPC client for the Sink service.
func NewSinkYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) SinkYARPCClient {
	return &_SinkYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.Sink",
			ClientConfig: clientConfig,
			Options:      options,
		},
	)}
}

// SinkYARPCServer is the YARPC server-side interface for the Sink service.
type SinkYARPCServer interface {
	Fire(context.Context, *FireRequest) error
}

// BuildSinkYARPCProcedures prepares an implementation of the Sink service for YARPC registration.
func BuildSinkYARPCProcedures(server SinkYARPCServer) []transport.Procedure {
	handler := &_SinkYARPCHandler{server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName:        "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.Sink",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{
				{
					MethodName: "Fire",
					Handler: protobuf.NewOnewayHandler(
						protobuf.OnewayHandlerParams{
							Handle:     handler.Fire,
							NewRequest: newSinkServiceFireYARPCRequest,
						},
					),
				},
			},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{},
		},
	)
}

// FxSinkYARPCClientParams defines the input
// for NewFxSinkYARPCClient. It provides the
// paramaters to get a SinkYARPCClient in an
// Fx application.
type FxSinkYARPCClientParams struct {
	fx.In

	Provider yarpc.ClientConfig
}

// FxSinkYARPCClientResult defines the output
// of NewFxSinkYARPCClient. It provides a
// SinkYARPCClient to an Fx application.
type FxSinkYARPCClientResult struct {
	fx.Out

	Client SinkYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxSinkYARPCClient provides a SinkYARPCClient
// to an Fx application using the given name for routing.
//
//  fx.Provide(
//    testing.NewFxSinkYARPCClient("service-name"),
//    ...
//  )
func NewFxSinkYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxSinkYARPCClientParams) FxSinkYARPCClientResult {
		return FxSinkYARPCClientResult{
			Client: NewSinkYARPCClient(params.Provider.ClientConfig(name), options...),
		}
	}
}

// FxSinkYARPCProceduresParams defines the input
// for NewFxSinkYARPCProcedures. It provides the
// paramaters to get SinkYARPCServer procedures in an
// Fx application.
type FxSinkYARPCProceduresParams struct {
	fx.In

	Server SinkYARPCServer
}

// FxSinkYARPCProceduresResult defines the output
// of NewFxSinkYARPCProcedures. It provides
// SinkYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxSinkYARPCProceduresResult struct {
	fx.Out

	Procedures     []transport.Procedure `group:"yarpcfx"`
	ReflectionMeta reflection.ServerMeta `group:"yarpcfx"`
}

// NewFxSinkYARPCProcedures provides SinkYARPCServer procedures to an Fx application.
// It expects a SinkYARPCServer to be present in the container.
//
//  fx.Provide(
//    testing.NewFxSinkYARPCProcedures(),
//    ...
//  )
func NewFxSinkYARPCProcedures() interface{} {
	return func(params FxSinkYARPCProceduresParams) FxSinkYARPCProceduresResult {
		return FxSinkYARPCProceduresResult{
			Procedures: BuildSinkYARPCProcedures(params.Server),
			ReflectionMeta: reflection.ServerMeta{
				ServiceName:     "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.Sink",
				FileDescriptors: yarpcFileDescriptorClosure301ba429865f230b,
			},
		}
	}
}

type _SinkYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_SinkYARPCCaller) Fire(ctx context.Context, request *FireRequest, options ...yarpc.CallOption) (yarpc.Ack, error) {
	return c.streamClient.CallOneway(ctx, "Fire", request, options...)
}

type _SinkYARPCHandler struct {
	server SinkYARPCServer
}

func (h *_SinkYARPCHandler) Fire(ctx context.Context, requestMessage proto.Message) error {
	var request *FireRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*FireRequest)
		if !ok {
			return protobuf.CastError(emptySinkServiceFireYARPCRequest, requestMessage)
		}
	}
	return h.server.Fire(ctx, request)
}

func newSinkServiceFireYARPCRequest() proto.Message {
	return &FireRequest{}
}

func newSinkServiceFireYARPCResponse() proto.Message {
	return &yarpcproto.Oneway{}
}

var (
	emptySinkServiceFireYARPCRequest  = &FireRequest{}
	emptySinkServiceFireYARPCResponse = &yarpcproto.Oneway{}
)

// AllYARPCClient is the YARPC client-side interface for the All service.
type AllYARPCClient interface {
	GetValue(context.Context, *GetValueRequest, ...yarpc.CallOption) (*GetValueResponse, error)
	SetValue(context.Context, *SetValueRequest, ...yarpc.CallOption) (*SetValueResponse, error)
	Fire(context.Context, *FireRequest, ...yarpc.CallOption) (yarpc.Ack, error)
	HelloOne(context.Context, ...yarpc.CallOption) (AllServiceHelloOneYARPCClient, error)
	HelloTwo(context.Context, *HelloRequest, ...yarpc.CallOption) (AllServiceHelloTwoYARPCClient, error)
	HelloThree(context.Context, ...yarpc.CallOption) (AllServiceHelloThreeYARPCClient, error)
}

// AllServiceHelloOneYARPCClient sends HelloRequests and receives the single HelloResponse when sending is done.
type AllServiceHelloOneYARPCClient interface {
	Context() context.Context
	Send(*HelloRequest, ...yarpc.StreamOption) error
	CloseAndRecv(...yarpc.StreamOption) (*HelloResponse, error)
}

// AllServiceHelloTwoYARPCClient receives HelloResponses, returning io.EOF when the stream is complete.
type AllServiceHelloTwoYARPCClient interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*HelloResponse, error)
	CloseSend(...yarpc.StreamOption) error
}

// AllServiceHelloThreeYARPCClient sends HelloRequests and receives HelloResponses, returning io.EOF when the stream is complete.
type AllServiceHelloThreeYARPCClient interface {
	Context() context.Context
	Send(*HelloRequest, ...yarpc.StreamOption) error
	Recv(...yarpc.StreamOption) (*HelloResponse, error)
	CloseSend(...yarpc.StreamOption) error
}

// NewAllYARPCClient builds a new YARPC client for the All service.
func NewAllYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) AllYARPCClient {
	return &_AllYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.All",
			ClientConfig: clientConfig,
			Options:      options,
		},
	)}
}

// AllYARPCServer is the YARPC server-side interface for the All service.
type AllYARPCServer interface {
	GetValue(context.Context, *GetValueRequest) (*GetValueResponse, error)
	SetValue(context.Context, *SetValueRequest) (*SetValueResponse, error)
	Fire(context.Context, *FireRequest) error
	HelloOne(AllServiceHelloOneYARPCServer) (*HelloResponse, error)
	HelloTwo(*HelloRequest, AllServiceHelloTwoYARPCServer) error
	HelloThree(AllServiceHelloThreeYARPCServer) error
}

// AllServiceHelloOneYARPCServer receives HelloRequests.
type AllServiceHelloOneYARPCServer interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*HelloRequest, error)
}

// AllServiceHelloTwoYARPCServer sends HelloResponses.
type AllServiceHelloTwoYARPCServer interface {
	Context() context.Context
	Send(*HelloResponse, ...yarpc.StreamOption) error
}

// AllServiceHelloThreeYARPCServer receives HelloRequests and sends HelloResponse.
type AllServiceHelloThreeYARPCServer interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*HelloRequest, error)
	Send(*HelloResponse, ...yarpc.StreamOption) error
}

// BuildAllYARPCProcedures prepares an implementation of the All service for YARPC registration.
func BuildAllYARPCProcedures(server AllYARPCServer) []transport.Procedure {
	handler := &_AllYARPCHandler{server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.All",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "GetValue",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:     handler.GetValue,
							NewRequest: newAllServiceGetValueYARPCRequest,
						},
					),
				},
				{
					MethodName: "SetValue",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:     handler.SetValue,
							NewRequest: newAllServiceSetValueYARPCRequest,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{
				{
					MethodName: "Fire",
					Handler: protobuf.NewOnewayHandler(
						protobuf.OnewayHandlerParams{
							Handle:     handler.Fire,
							NewRequest: newAllServiceFireYARPCRequest,
						},
					),
				},
			},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{
				{
					MethodName: "HelloThree",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.HelloThree,
						},
					),
				},

				{
					MethodName: "HelloTwo",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.HelloTwo,
						},
					),
				},

				{
					MethodName: "HelloOne",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.HelloOne,
						},
					),
				},
			},
		},
	)
}

// FxAllYARPCClientParams defines the input
// for NewFxAllYARPCClient. It provides the
// paramaters to get a AllYARPCClient in an
// Fx application.
type FxAllYARPCClientParams struct {
	fx.In

	Provider yarpc.ClientConfig
}

// FxAllYARPCClientResult defines the output
// of NewFxAllYARPCClient. It provides a
// AllYARPCClient to an Fx application.
type FxAllYARPCClientResult struct {
	fx.Out

	Client AllYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxAllYARPCClient provides a AllYARPCClient
// to an Fx application using the given name for routing.
//
//  fx.Provide(
//    testing.NewFxAllYARPCClient("service-name"),
//    ...
//  )
func NewFxAllYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxAllYARPCClientParams) FxAllYARPCClientResult {
		return FxAllYARPCClientResult{
			Client: NewAllYARPCClient(params.Provider.ClientConfig(name), options...),
		}
	}
}

// FxAllYARPCProceduresParams defines the input
// for NewFxAllYARPCProcedures. It provides the
// paramaters to get AllYARPCServer procedures in an
// Fx application.
type FxAllYARPCProceduresParams struct {
	fx.In

	Server AllYARPCServer
}

// FxAllYARPCProceduresResult defines the output
// of NewFxAllYARPCProcedures. It provides
// AllYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxAllYARPCProceduresResult struct {
	fx.Out

	Procedures     []transport.Procedure `group:"yarpcfx"`
	ReflectionMeta reflection.ServerMeta `group:"yarpcfx"`
}

// NewFxAllYARPCProcedures provides AllYARPCServer procedures to an Fx application.
// It expects a AllYARPCServer to be present in the container.
//
//  fx.Provide(
//    testing.NewFxAllYARPCProcedures(),
//    ...
//  )
func NewFxAllYARPCProcedures() interface{} {
	return func(params FxAllYARPCProceduresParams) FxAllYARPCProceduresResult {
		return FxAllYARPCProceduresResult{
			Procedures: BuildAllYARPCProcedures(params.Server),
			ReflectionMeta: reflection.ServerMeta{
				ServiceName:     "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.All",
				FileDescriptors: yarpcFileDescriptorClosure301ba429865f230b,
			},
		}
	}
}

type _AllYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_AllYARPCCaller) GetValue(ctx context.Context, request *GetValueRequest, options ...yarpc.CallOption) (*GetValueResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetValue", request, newAllServiceGetValueYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetValueResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAllServiceGetValueYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AllYARPCCaller) SetValue(ctx context.Context, request *SetValueRequest, options ...yarpc.CallOption) (*SetValueResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "SetValue", request, newAllServiceSetValueYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*SetValueResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAllServiceSetValueYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AllYARPCCaller) Fire(ctx context.Context, request *FireRequest, options ...yarpc.CallOption) (yarpc.Ack, error) {
	return c.streamClient.CallOneway(ctx, "Fire", request, options...)
}

func (c *_AllYARPCCaller) HelloOne(ctx context.Context, options ...yarpc.CallOption) (AllServiceHelloOneYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "HelloOne", options...)
	if err != nil {
		return nil, err
	}
	return &_AllServiceHelloOneYARPCClient{stream: stream}, nil
}

func (c *_AllYARPCCaller) HelloTwo(ctx context.Context, request *HelloRequest, options ...yarpc.CallOption) (AllServiceHelloTwoYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "HelloTwo", options...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(request); err != nil {
		return nil, err
	}
	return &_AllServiceHelloTwoYARPCClient{stream: stream}, nil
}

func (c *_AllYARPCCaller) HelloThree(ctx context.Context, options ...yarpc.CallOption) (AllServiceHelloThreeYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "HelloThree", options...)
	if err != nil {
		return nil, err
	}
	return &_AllServiceHelloThreeYARPCClient{stream: stream}, nil
}

type _AllYARPCHandler struct {
	server AllYARPCServer
}

func (h *_AllYARPCHandler) GetValue(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetValueRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetValueRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAllServiceGetValueYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetValue(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AllYARPCHandler) SetValue(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *SetValueRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*SetValueRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAllServiceSetValueYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.SetValue(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AllYARPCHandler) Fire(ctx context.Context, requestMessage proto.Message) error {
	var request *FireRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*FireRequest)
		if !ok {
			return protobuf.CastError(emptyAllServiceFireYARPCRequest, requestMessage)
		}
	}
	return h.server.Fire(ctx, request)
}

func (h *_AllYARPCHandler) HelloOne(serverStream *protobuf.ServerStream) error {
	response, err := h.server.HelloOne(&_AllServiceHelloOneYARPCServer{serverStream: serverStream})
	if err != nil {
		return err
	}
	return serverStream.Send(response)
}

func (h *_AllYARPCHandler) HelloTwo(serverStream *protobuf.ServerStream) error {
	requestMessage, err := serverStream.Receive(newAllServiceHelloTwoYARPCRequest)
	if requestMessage == nil {
		return err
	}

	request, ok := requestMessage.(*HelloRequest)
	if !ok {
		return protobuf.CastError(emptyAllServiceHelloTwoYARPCRequest, requestMessage)
	}
	return h.server.HelloTwo(request, &_AllServiceHelloTwoYARPCServer{serverStream: serverStream})
}

func (h *_AllYARPCHandler) HelloThree(serverStream *protobuf.ServerStream) error {
	return h.server.HelloThree(&_AllServiceHelloThreeYARPCServer{serverStream: serverStream})
}

type _AllServiceHelloOneYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_AllServiceHelloOneYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_AllServiceHelloOneYARPCClient) Send(request *HelloRequest, options ...yarpc.StreamOption) error {
	return c.stream.Send(request, options...)
}

func (c *_AllServiceHelloOneYARPCClient) CloseAndRecv(options ...yarpc.StreamOption) (*HelloResponse, error) {
	if err := c.stream.Close(options...); err != nil {
		return nil, err
	}
	responseMessage, err := c.stream.Receive(newAllServiceHelloOneYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAllServiceHelloOneYARPCResponse, responseMessage)
	}
	return response, err
}

type _AllServiceHelloTwoYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_AllServiceHelloTwoYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_AllServiceHelloTwoYARPCClient) Recv(options ...yarpc.StreamOption) (*HelloResponse, error) {
	responseMessage, err := c.stream.Receive(newAllServiceHelloTwoYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAllServiceHelloTwoYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AllServiceHelloTwoYARPCClient) CloseSend(options ...yarpc.StreamOption) error {
	return c.stream.Close(options...)
}

type _AllServiceHelloThreeYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_AllServiceHelloThreeYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_AllServiceHelloThreeYARPCClient) Send(request *HelloRequest, options ...yarpc.StreamOption) error {
	return c.stream.Send(request, options...)
}

func (c *_AllServiceHelloThreeYARPCClient) Recv(options ...yarpc.StreamOption) (*HelloResponse, error) {
	responseMessage, err := c.stream.Receive(newAllServiceHelloThreeYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAllServiceHelloThreeYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AllServiceHelloThreeYARPCClient) CloseSend(options ...yarpc.StreamOption) error {
	return c.stream.Close(options...)
}

type _AllServiceHelloOneYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_AllServiceHelloOneYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_AllServiceHelloOneYARPCServer) Recv(options ...yarpc.StreamOption) (*HelloRequest, error) {
	requestMessage, err := s.serverStream.Receive(newAllServiceHelloOneYARPCRequest, options...)
	if requestMessage == nil {
		return nil, err
	}
	request, ok := requestMessage.(*HelloRequest)
	if !ok {
		return nil, protobuf.CastError(emptyAllServiceHelloOneYARPCRequest, requestMessage)
	}
	return request, err
}

type _AllServiceHelloTwoYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_AllServiceHelloTwoYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_AllServiceHelloTwoYARPCServer) Send(response *HelloResponse, options ...yarpc.StreamOption) error {
	return s.serverStream.Send(response, options...)
}

type _AllServiceHelloThreeYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_AllServiceHelloThreeYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_AllServiceHelloThreeYARPCServer) Recv(options ...yarpc.StreamOption) (*HelloRequest, error) {
	requestMessage, err := s.serverStream.Receive(newAllServiceHelloThreeYARPCRequest, options...)
	if requestMessage == nil {
		return nil, err
	}
	request, ok := requestMessage.(*HelloRequest)
	if !ok {
		return nil, protobuf.CastError(emptyAllServiceHelloThreeYARPCRequest, requestMessage)
	}
	return request, err
}

func (s *_AllServiceHelloThreeYARPCServer) Send(response *HelloResponse, options ...yarpc.StreamOption) error {
	return s.serverStream.Send(response, options...)
}

func newAllServiceGetValueYARPCRequest() proto.Message {
	return &GetValueRequest{}
}

func newAllServiceGetValueYARPCResponse() proto.Message {
	return &GetValueResponse{}
}

func newAllServiceSetValueYARPCRequest() proto.Message {
	return &SetValueRequest{}
}

func newAllServiceSetValueYARPCResponse() proto.Message {
	return &SetValueResponse{}
}

func newAllServiceFireYARPCRequest() proto.Message {
	return &FireRequest{}
}

func newAllServiceFireYARPCResponse() proto.Message {
	return &yarpcproto.Oneway{}
}

func newAllServiceHelloOneYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newAllServiceHelloOneYARPCResponse() proto.Message {
	return &HelloResponse{}
}

func newAllServiceHelloTwoYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newAllServiceHelloTwoYARPCResponse() proto.Message {
	return &HelloResponse{}
}

func newAllServiceHelloThreeYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newAllServiceHelloThreeYARPCResponse() proto.Message {
	return &HelloResponse{}
}

var (
	emptyAllServiceGetValueYARPCRequest    = &GetValueRequest{}
	emptyAllServiceGetValueYARPCResponse   = &GetValueResponse{}
	emptyAllServiceSetValueYARPCRequest    = &SetValueRequest{}
	emptyAllServiceSetValueYARPCResponse   = &SetValueResponse{}
	emptyAllServiceFireYARPCRequest        = &FireRequest{}
	emptyAllServiceFireYARPCResponse       = &yarpcproto.Oneway{}
	emptyAllServiceHelloOneYARPCRequest    = &HelloRequest{}
	emptyAllServiceHelloOneYARPCResponse   = &HelloResponse{}
	emptyAllServiceHelloTwoYARPCRequest    = &HelloRequest{}
	emptyAllServiceHelloTwoYARPCResponse   = &HelloResponse{}
	emptyAllServiceHelloThreeYARPCRequest  = &HelloRequest{}
	emptyAllServiceHelloThreeYARPCResponse = &HelloResponse{}
)

var yarpcFileDescriptorClosure301ba429865f230b = [][]byte{
	// encoding/protobuf/protoc-gen-yarpc-go/internal/testing/testing.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x94, 0x31, 0x6f, 0xd3, 0x40,
		0x14, 0xc7, 0x7d, 0x69, 0x21, 0xe9, 0x2b, 0xd0, 0xea, 0x84, 0x50, 0xf1, 0x70, 0x54, 0x66, 0xc9,
		0x92, 0x4b, 0x15, 0x60, 0x60, 0x41, 0x80, 0x2a, 0x40, 0x2a, 0x28, 0x28, 0xae, 0x90, 0x60, 0x41,
		0x4e, 0xfc, 0x30, 0x56, 0xac, 0xbb, 0xd4, 0x3e, 0x13, 0x65, 0xe3, 0x23, 0xf0, 0x31, 0x90, 0x18,
		0xf8, 0x1a, 0x8c, 0x1d, 0x19, 0xc9, 0xb1, 0x30, 0xa1, 0x7e, 0x04, 0xe4, 0x3b, 0xbb, 0x89, 0x0a,
		0x12, 0x12, 0x09, 0x28, 0x03, 0x93, 0x9f, 0xef, 0xfe, 0xf7, 0x7b, 0xff, 0xf7, 0xde, 0xd9, 0xb0,
		0x8f, 0x62, 0x20, 0xc3, 0x58, 0x44, 0xed, 0x51, 0x2a, 0x95, 0xec, 0xe7, 0xaf, 0x6c, 0x30, 0x68,
		0x45, 0x28, 0x5a, 0x93, 0x20, 0x1d, 0x0d, 0x5a, 0x91, 0x6c, 0xc7, 0x42, 0x61, 0x2a, 0x82, 0xa4,
		0xad, 0x30, 0x53, 0x85, 0xba, 0x7c, 0x72, 0x23, 0xa6, 0x77, 0xf2, 0x3e, 0xa6, 0xdc, 0xa8, 0x79,
		0x05, 0xe4, 0x15, 0xd0, 0x06, 0x83, 0x08, 0x85, 0x11, 0x44, 0x92, 0x57, 0x34, 0x5e, 0x52, 0xdc,
		0xbb, 0x7f, 0xe8, 0x22, 0xc4, 0x91, 0xa5, 0xbb, 0x57, 0x8c, 0xc8, 0xc4, 0x6d, 0xeb, 0xc3, 0xae,
		0xb3, 0x48, 0xca, 0x28, 0xc1, 0x19, 0x37, 0xcc, 0xd3, 0x40, 0xc5, 0x52, 0xd8, 0x7d, 0xef, 0x39,
		0x6c, 0x3d, 0x44, 0xf5, 0x2c, 0x48, 0x72, 0xec, 0xe1, 0x51, 0x8e, 0x99, 0xa2, 0xdb, 0xb0, 0x36,
		0xc4, 0xc9, 0x0e, 0xd9, 0x25, 0xcd, 0x8d, 0x5e, 0x11, 0xd2, 0x9b, 0xd0, 0x18, 0x0f, 0xd5, 0xcb,
		0x22, 0xeb, 0x4e, 0x6d, 0x97, 0x34, 0x37, 0x3b, 0x57, 0xb9, 0xe5, 0xce, 0x8a, 0xdc, 0x2f, 0xb9,
		0xbd, 0xfa, 0x78, 0xa8, 0x0e, 0x31, 0x53, 0x5e, 0x13, 0xb6, 0x67, 0xe8, 0x6c, 0x24, 0x45, 0x86,
		0xf4, 0x32, 0x9c, 0x7b, 0x53, 0x2c, 0x18, 0xcc, 0x46, 0xcf, 0xbe, 0x78, 0xb7, 0x61, 0xcb, 0xff,
		0xad, 0x89, 0x5f, 0x1f, 0xbd, 0x0e, 0x9b, 0x0f, 0xe2, 0xf4, 0xf4, 0xd8, 0xa9, 0x88, 0xcc, 0x8b,
		0x18, 0x5c, 0x78, 0x84, 0x49, 0x22, 0x2b, 0xd5, 0x25, 0xa8, 0xc5, 0x61, 0x29, 0xa9, 0xc5, 0xa1,
		0x77, 0x0d, 0x2e, 0x96, 0xfb, 0xa5, 0xcd, 0x33, 0x82, 0xce, 0xf7, 0x1a, 0x34, 0x0e, 0x70, 0x62,
		0x1c, 0xd2, 0x8f, 0x04, 0x1a, 0x55, 0x61, 0xb4, 0xcb, 0x17, 0x1b, 0x3d, 0x3f, 0xd3, 0x7d, 0xf7,
		0xe9, 0xf2, 0x80, 0xb6, 0x18, 0xcf, 0x31, 0x8e, 0xfd, 0xa5, 0x39, 0xf6, 0x97, 0xed, 0xd8, 0xff,
		0xc9, 0x71, 0xe7, 0x08, 0xd6, 0xfd, 0x58, 0x0c, 0x69, 0x0c, 0xeb, 0xc5, 0x78, 0xe9, 0xc1, 0xa2,
		0x39, 0xe6, 0x2e, 0x89, 0x4b, 0xe7, 0x61, 0x5d, 0x81, 0xe3, 0x60, 0xe2, 0x39, 0x1d, 0x5d, 0x87,
		0xb5, 0x7b, 0x49, 0xf2, 0x7f, 0xbc, 0x7f, 0x7f, 0xbc, 0xff, 0x70, 0xac, 0xf4, 0x03, 0x81, 0x86,
		0xf9, 0xb8, 0xbb, 0x02, 0xe9, 0xe3, 0x45, 0xf3, 0xcd, 0xff, 0x46, 0xdc, 0x27, 0x4b, 0xa2, 0x55,
		0x6d, 0x69, 0x92, 0x99, 0xdb, 0xc3, 0xb1, 0x5c, 0x71, 0xb7, 0x7b, 0xa4, 0xb8, 0x78, 0x60, 0xdd,
		0xbe, 0x4e, 0x71, 0xf5, 0xbb, 0xbb, 0x47, 0xee, 0xdf, 0x3a, 0x9e, 0x32, 0xe7, 0xf3, 0x94, 0x39,
		0x27, 0x53, 0x46, 0xde, 0x6a, 0x46, 0xde, 0x6b, 0x46, 0x3e, 0x69, 0x46, 0x8e, 0x35, 0x23, 0x5f,
		0x34, 0x23, 0xdf, 0x34, 0x73, 0x4e, 0x34, 0x23, 0xef, 0xbe, 0x32, 0xe7, 0x45, 0xbd, 0x44, 0xf5,
		0xcf, 0x9b, 0x6c, 0x37, 0x7e, 0x04, 0x00, 0x00, 0xff, 0xff, 0x50, 0x86, 0xe4, 0xc2, 0x2e, 0x08,
		0x00, 0x00,
	},
	// encoding/protobuf/protoc-gen-yarpc-go/internal/testing/dep.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0x48, 0xcd, 0x4b, 0xce,
		0x4f, 0xc9, 0xcc, 0x4b, 0xd7, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0x83, 0x30, 0x92,
		0x75, 0xd3, 0x53, 0xf3, 0x74, 0x2b, 0x13, 0x8b, 0x0a, 0x92, 0x75, 0xd3, 0xf3, 0xf5, 0x33, 0xf3,
		0x4a, 0x52, 0x8b, 0xf2, 0x12, 0x73, 0xf4, 0x4b, 0x52, 0x8b, 0x4b, 0x40, 0xaa, 0x53, 0x52, 0x0b,
		0xf4, 0xc0, 0x0a, 0x85, 0xec, 0x4a, 0x93, 0x52, 0x8b, 0xf4, 0xc0, 0x2a, 0xf5, 0x60, 0x86, 0xe9,
		0xc1, 0x0c, 0x83, 0x30, 0x92, 0xd3, 0x53, 0xf3, 0xc0, 0x0a, 0xd2, 0xf3, 0xf5, 0x60, 0x26, 0xe9,
		0x41, 0x4d, 0x52, 0x12, 0xe2, 0x12, 0x08, 0x4e, 0x2d, 0x09, 0x4b, 0xcc, 0x29, 0x4d, 0x0d, 0x4a,
		0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x75, 0x32, 0xbd, 0xf0, 0x50, 0x8e, 0xe1, 0xc6, 0x43, 0x39,
		0x86, 0x0f, 0x0f, 0xe5, 0x18, 0x1b, 0x1e, 0xc9, 0x31, 0xae, 0x78, 0x24, 0xc7, 0x78, 0xe2, 0x91,
		0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xbe, 0x78, 0x24, 0xc7, 0xf0, 0xe1,
		0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x51, 0xec, 0x50, 0xa3, 0x92, 0xd8, 0xc0, 0xb6, 0x19,
		0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x71, 0x66, 0x0a, 0xd5, 0x00, 0x00, 0x00,
	},
	// yarpcproto/yarpc.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xab, 0x4c, 0x2c, 0x2a,
		0x48, 0x2e, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x07, 0x33, 0xf5, 0xc0, 0x6c, 0x21, 0xae, 0xd2, 0xa4,
		0xd4, 0x22, 0x3d, 0xb0, 0x88, 0x92, 0x14, 0x17, 0x9b, 0x7f, 0x5e, 0x6a, 0x79, 0x62, 0xa5, 0x90,
		0x00, 0x17, 0x73, 0x62, 0x72, 0xb6, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x47, 0x10, 0x88, 0xe9, 0x64,
		0x71, 0xe1, 0xa1, 0x1c, 0xc3, 0x8d, 0x87, 0x72, 0x0c, 0x1f, 0x1e, 0xca, 0x31, 0x36, 0x3c, 0x92,
		0x63, 0x5c, 0xf1, 0x48, 0x8e, 0xf1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c,
		0x92, 0x63, 0x7c, 0xf1, 0x48, 0x8e, 0xe1, 0xc3, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0xa2,
		0xb8, 0x10, 0xb6, 0x25, 0xb1, 0x81, 0x29, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x75, 0xef,
		0xbb, 0x4c, 0x82, 0x00, 0x00, 0x00,
	},
	// google/protobuf/duration.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0xcf, 0xcf, 0x4f,
		0xcf, 0x49, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x4f, 0x29, 0x2d, 0x4a,
		0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x03, 0x8b, 0x08, 0xf1, 0x43, 0xe4, 0xf5, 0x60, 0xf2, 0x4a, 0x56,
		0x5c, 0x1c, 0x2e, 0x50, 0x25, 0x42, 0x12, 0x5c, 0xec, 0xc5, 0xa9, 0xc9, 0xf9, 0x79, 0x29, 0xc5,
		0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x30, 0xae, 0x90, 0x08, 0x17, 0x6b, 0x5e, 0x62, 0x5e,
		0x7e, 0xb1, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x84, 0xe3, 0xd4, 0xcc, 0x78, 0xe1, 0xa1,
		0x1c, 0xc3, 0x8d, 0x87, 0x72, 0x0c, 0x1f, 0x1e, 0xca, 0x31, 0xae, 0x78, 0x24, 0xc7, 0x78, 0xe2,
		0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xbe, 0x78, 0x24, 0xc7, 0xf0,
		0xe1, 0x91, 0x1c, 0xe3, 0x8a, 0xc7, 0x72, 0x8c, 0x27, 0x1e, 0xcb, 0x31, 0x72, 0x09, 0x27, 0xe7,
		0xe7, 0xea, 0xa1, 0xd9, 0xef, 0xc4, 0x0b, 0xb3, 0x3d, 0x00, 0x24, 0x12, 0xc0, 0x18, 0xc5, 0x5a,
		0x52, 0x59, 0x90, 0x5a, 0xfc, 0x83, 0x91, 0x71, 0x11, 0x13, 0xb3, 0x7b, 0x80, 0xd3, 0x2a, 0x26,
		0x39, 0x77, 0x88, 0x96, 0x00, 0xa8, 0x16, 0xbd, 0xf0, 0xd4, 0x9c, 0x1c, 0xef, 0xbc, 0xfc, 0xf2,
		0xbc, 0x10, 0x90, 0xca, 0x24, 0x36, 0xb0, 0x59, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7d,
		0xb1, 0xa3, 0x66, 0xfb, 0x00, 0x00, 0x00,
	},
}

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) KeyValueYARPCClient {
			return NewKeyValueYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) SinkYARPCClient {
			return NewSinkYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) AllYARPCClient {
			return NewAllYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}
